import re

# --- CONFIG ---
source_file = r"C:\full\path\to\eagle_log.txt"
output_file = r"C:\full\path\to\eagle_log_modified.txt"

# Map of originals -> variants
serial_map = {
    "261": "1261",
    # add more if needed
}

# If True, also replace exact matches of old serial inside the block
replace_everywhere_in_block = False
# --- END CONFIG ---


# Regex for block header: e.g. "Datalog for Serial#: 261"
HEADER_RE = re.compile(r"^(Datalog for Serial#:\s*)(\d+)(.*)$")

with open(source_file, "r", encoding="utf-8", errors="replace") as f:
    lines = f.readlines()

out = []
i = 0
n = len(lines)

while i < n:
    line = lines[i]
    m = HEADER_RE.match(line)

    if not m:
        # Not a header, just copy it
        out.append(line)
        i += 1
        continue

    # We found a header, start collecting block
    header_prefix, serial, header_suffix = m.groups()
    block = [line]
    i += 1

    # Collect until blank line or EOF
    while i < n:
        block.append(lines[i])
        if lines[i].strip() == "":
            i += 1
            break
        i += 1

    # Write original block
    out.extend(block)

    # Duplicate if serial is in our map
    if serial in serial_map:
        new_serial = serial_map[serial]

        # Add a blank line before duplicate (so thereâ€™s spacing)
        if out and out[-1].strip() != "":
            out.append("\n")

        dup = []
        # Replace header safely
        new_header = f"{header_prefix}{new_serial}{header_suffix}"
        dup.append(new_header + "\n")

        if replace_everywhere_in_block:
            pat = re.compile(rf"\b{re.escape(serial)}\b")
            for bline in block[1:]:
                dup.append(pat.sub(new_serial, bline))
        else:
            dup.extend(block[1:])

        out.extend(dup)

with open(output_file, "w", encoding="utf-8") as f:
    f.writelines(out)

print(f"Done. Wrote {output_file}")
